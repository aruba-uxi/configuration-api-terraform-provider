/*
Configuration Api

Nice description goes here

API version: 1.15.0
Contact: support@capenetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config_api_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SensorGroupAssignmentsItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SensorGroupAssignmentsItem{}

// SensorGroupAssignmentsItem struct for SensorGroupAssignmentsItem
type SensorGroupAssignmentsItem struct {
	Uid       string `json:"uid"`
	GroupUid  string `json:"group_uid"`
	SensorUid string `json:"sensor_uid"`
}

type _SensorGroupAssignmentsItem SensorGroupAssignmentsItem

// NewSensorGroupAssignmentsItem instantiates a new SensorGroupAssignmentsItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSensorGroupAssignmentsItem(uid string, groupUid string, sensorUid string) *SensorGroupAssignmentsItem {
	this := SensorGroupAssignmentsItem{}
	this.Uid = uid
	this.GroupUid = groupUid
	this.SensorUid = sensorUid
	return &this
}

// NewSensorGroupAssignmentsItemWithDefaults instantiates a new SensorGroupAssignmentsItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSensorGroupAssignmentsItemWithDefaults() *SensorGroupAssignmentsItem {
	this := SensorGroupAssignmentsItem{}
	return &this
}

// GetUid returns the Uid field value
func (o *SensorGroupAssignmentsItem) GetUid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uid
}

// GetUidOk returns a tuple with the Uid field value
// and a boolean to check if the value has been set.
func (o *SensorGroupAssignmentsItem) GetUidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uid, true
}

// SetUid sets field value
func (o *SensorGroupAssignmentsItem) SetUid(v string) {
	o.Uid = v
}

// GetGroupUid returns the GroupUid field value
func (o *SensorGroupAssignmentsItem) GetGroupUid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupUid
}

// GetGroupUidOk returns a tuple with the GroupUid field value
// and a boolean to check if the value has been set.
func (o *SensorGroupAssignmentsItem) GetGroupUidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupUid, true
}

// SetGroupUid sets field value
func (o *SensorGroupAssignmentsItem) SetGroupUid(v string) {
	o.GroupUid = v
}

// GetSensorUid returns the SensorUid field value
func (o *SensorGroupAssignmentsItem) GetSensorUid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SensorUid
}

// GetSensorUidOk returns a tuple with the SensorUid field value
// and a boolean to check if the value has been set.
func (o *SensorGroupAssignmentsItem) GetSensorUidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SensorUid, true
}

// SetSensorUid sets field value
func (o *SensorGroupAssignmentsItem) SetSensorUid(v string) {
	o.SensorUid = v
}

func (o SensorGroupAssignmentsItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SensorGroupAssignmentsItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uid"] = o.Uid
	toSerialize["group_uid"] = o.GroupUid
	toSerialize["sensor_uid"] = o.SensorUid
	return toSerialize, nil
}

func (o *SensorGroupAssignmentsItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uid",
		"group_uid",
		"sensor_uid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSensorGroupAssignmentsItem := _SensorGroupAssignmentsItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSensorGroupAssignmentsItem)

	if err != nil {
		return err
	}

	*o = SensorGroupAssignmentsItem(varSensorGroupAssignmentsItem)

	return err
}

type NullableSensorGroupAssignmentsItem struct {
	value *SensorGroupAssignmentsItem
	isSet bool
}

func (v NullableSensorGroupAssignmentsItem) Get() *SensorGroupAssignmentsItem {
	return v.value
}

func (v *NullableSensorGroupAssignmentsItem) Set(val *SensorGroupAssignmentsItem) {
	v.value = val
	v.isSet = true
}

func (v NullableSensorGroupAssignmentsItem) IsSet() bool {
	return v.isSet
}

func (v *NullableSensorGroupAssignmentsItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSensorGroupAssignmentsItem(val *SensorGroupAssignmentsItem) *NullableSensorGroupAssignmentsItem {
	return &NullableSensorGroupAssignmentsItem{value: val, isSet: true}
}

func (v NullableSensorGroupAssignmentsItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSensorGroupAssignmentsItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
