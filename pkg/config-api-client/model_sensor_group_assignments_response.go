/*
Configuration Api

Nice description goes here

API version: 1.9.0
Contact: support@capenetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config_api_client

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the SensorGroupAssignmentsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SensorGroupAssignmentsResponse{}

// SensorGroupAssignmentsResponse struct for SensorGroupAssignmentsResponse
type SensorGroupAssignmentsResponse struct {
	SensorGroupAssignments []SensorGroupAssignment `json:"sensor_group_assignments"`
	Pagination             PaginationDetails       `json:"pagination"`
}

type _SensorGroupAssignmentsResponse SensorGroupAssignmentsResponse

// NewSensorGroupAssignmentsResponse instantiates a new SensorGroupAssignmentsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSensorGroupAssignmentsResponse(sensorGroupAssignments []SensorGroupAssignment, pagination PaginationDetails) *SensorGroupAssignmentsResponse {
	this := SensorGroupAssignmentsResponse{}
	this.SensorGroupAssignments = sensorGroupAssignments
	this.Pagination = pagination
	return &this
}

// NewSensorGroupAssignmentsResponseWithDefaults instantiates a new SensorGroupAssignmentsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSensorGroupAssignmentsResponseWithDefaults() *SensorGroupAssignmentsResponse {
	this := SensorGroupAssignmentsResponse{}
	return &this
}

// GetSensorGroupAssignments returns the SensorGroupAssignments field value
func (o *SensorGroupAssignmentsResponse) GetSensorGroupAssignments() []SensorGroupAssignment {
	if o == nil {
		var ret []SensorGroupAssignment
		return ret
	}

	return o.SensorGroupAssignments
}

// GetSensorGroupAssignmentsOk returns a tuple with the SensorGroupAssignments field value
// and a boolean to check if the value has been set.
func (o *SensorGroupAssignmentsResponse) GetSensorGroupAssignmentsOk() ([]SensorGroupAssignment, bool) {
	if o == nil {
		return nil, false
	}
	return o.SensorGroupAssignments, true
}

// SetSensorGroupAssignments sets field value
func (o *SensorGroupAssignmentsResponse) SetSensorGroupAssignments(v []SensorGroupAssignment) {
	o.SensorGroupAssignments = v
}

// GetPagination returns the Pagination field value
func (o *SensorGroupAssignmentsResponse) GetPagination() PaginationDetails {
	if o == nil {
		var ret PaginationDetails
		return ret
	}

	return o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value
// and a boolean to check if the value has been set.
func (o *SensorGroupAssignmentsResponse) GetPaginationOk() (*PaginationDetails, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pagination, true
}

// SetPagination sets field value
func (o *SensorGroupAssignmentsResponse) SetPagination(v PaginationDetails) {
	o.Pagination = v
}

func (o SensorGroupAssignmentsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SensorGroupAssignmentsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sensor_group_assignments"] = o.SensorGroupAssignments
	toSerialize["pagination"] = o.Pagination
	return toSerialize, nil
}

func (o *SensorGroupAssignmentsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sensor_group_assignments",
		"pagination",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSensorGroupAssignmentsResponse := _SensorGroupAssignmentsResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSensorGroupAssignmentsResponse)

	if err != nil {
		return err
	}

	*o = SensorGroupAssignmentsResponse(varSensorGroupAssignmentsResponse)

	return err
}

type NullableSensorGroupAssignmentsResponse struct {
	value *SensorGroupAssignmentsResponse
	isSet bool
}

func (v NullableSensorGroupAssignmentsResponse) Get() *SensorGroupAssignmentsResponse {
	return v.value
}

func (v *NullableSensorGroupAssignmentsResponse) Set(val *SensorGroupAssignmentsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSensorGroupAssignmentsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSensorGroupAssignmentsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSensorGroupAssignmentsResponse(val *SensorGroupAssignmentsResponse) *NullableSensorGroupAssignmentsResponse {
	return &NullableSensorGroupAssignmentsResponse{value: val, isSet: true}
}

func (v NullableSensorGroupAssignmentsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSensorGroupAssignmentsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
